bot.py
import os
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)

# –ë–µ—Ä—ë–º —Å–µ–∫—Ä–µ—Ç—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–Ω–µ —Ö—Ä–∞–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω/–∫–∞—Ä—Ç—É –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º—É –∫–æ–¥–µ)
BOT_TOKEN = os.getenv("8132763923:AAE5w5ZVwhkt7e0SZBS5Nw-xNHfNDDr7DrU")
CARD_NUMBER = os.getenv("9860 1606 0578 8241")

app = Application.builder().token(BOT_TOKEN).build()

# –í –ø–∞–º—è—Ç–∏ (–ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è, –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –≤—Å—ë —Å–±—Ä–æ—Å–∏—Ç—Å—è)
pending_payments = {}        # { user_id: message_id_of_receipt }
global_admin_id = {"id": None}


# /start ‚Äî –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –ø–µ—Ä–≤–æ–≥–æ, –∫—Ç–æ –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞, –∫–∞–∫ –∞–¥–º–∏–Ω–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if global_admin_id["id"] is None:
        global_admin_id["id"] = user.id
        await update.message.reply_text("‚úÖ Siz admin sifatida belgilandingiz!")  # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
    await update.message.reply_text(
        "üéÆ Assalomu alaykum!\n\n"
        "üí∏ Bu bot orqali Steam hisobini to'ldirish mumkin.\n"
        "üëâ To'lov uchun /pay buyrug'ini bosing."
    )


# /pay ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—É
async def pay(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if CARD_NUMBER:
        await update.message.reply_text(
            f"üí≥ To‚Äòlov uchun karta raqami:\n\n{CARD_NUMBER}\n\n"
            "üìå To‚Äòlovni amalga oshirgach, chek (skrin) yuboring. Admin tasdiqlaydi.",
            parse_mode="Markdown"
        )
    else:
        await update.message.reply_text("‚ö†Ô∏è Karta raqami sozlanmagan! Admin bilan bog'laning.")


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ (—á–µ–∫–∏)
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    message = update.effective_message

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º id —Å–æ–æ–±—â–µ–Ω–∏—è —Å —á–µ–∫–æ–º
    pending_payments[user.id] = message.message_id

    # —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ —Å inline –∫–Ω–æ–ø–∫–∞–º–∏
    admin_id = global_admin_id["id"]
    if admin_id:
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ Tasdiqlash", callback_data=f"confirm:{user.id}"),
                InlineKeyboardButton("‚ùå Rad etish", callback_data=f"reject:{user.id}")
            ]
        ])
        await context.bot.send_message(
            chat_id=admin_id,
            text=(
                f"üì• Yangi chek keldi!\n"
                f"üë§ Foydalanuvchi: {user.full_name}\n"
                f"üÜî ID: {user.id}\n\n"
                "Skirnni ko'rish uchun botdagi chatga o'ting."
            ),
            reply_markup=keyboard
        )

    await message.reply_text("üí≥ To‚Äòlovingiz tekshirish uchun yuborildi. Admin tasdiqlagach xabar olasiz.")


# inline callbacks (confirm / reject)
async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # —É–±–∏—Ä–∞–µ—Ç —Å–ø–∏–Ω–Ω–µ—Ä
    data = query.data or ""
    action, user_id_str = data.split(":")
    user_id = int(user_id_str)

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    if query.from_user.id != global_admin_id["id"]:
        await query.answer("‚õî Sizda ruxsat yo'q.", show_alert=True)
        return

    if user_id not in pending_payments:
        await query.message.edit_text("‚ùó Bu foydalanuvchida kutilayotgan to‚Äòlov yo‚Äòq.")
        return

    if action == "confirm":
        await context.bot.send_message(user_id, "‚úÖ To‚Äòlovingiz qabul qilindi! Rahmat üôå\nSteam hisobingiz tez orada to ªldiriladi.")
        await query.message.edit_text(f"‚òëÔ∏è To‚Äòlov tasdiqlandi (User ID: {user_id})")
    elif action == "reject":
        await context.bot.send_message(user_id, "‚ùå To‚Äòlovingiz rad etildi. Iltimos, qayta yuboring yoki admin bilan bog‚Äòlaning.")
        await query.message.edit_text(f"üö´ To‚Äòlov rad etildi (User ID: {user_id})")

    del pending_payments[user_id]
# /status ‚Äî —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != global_admin_id["id"]:
        await update.message.reply_text("‚õî Sizda ruxsat yo'q.")
        return
    if not pending_payments:
        await update.message.reply_text("üü¢ Kutilayotgan to‚Äòlovlar yo‚Äòq.")
        return
    text = "üìã Kutilayotgan to‚Äòlovlar:\n\n"
    for uid in pending_payments:
        text += f"‚Ä¢ User ID: {uid}\n"
    await update.message.reply_text(text)


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("pay", pay))
app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
app.add_handler(CallbackQueryHandler(callback_handler))
app.add_handler(CommandHandler("status", status))

if __name__ == "__main__":
    app.run_polling()
